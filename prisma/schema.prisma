// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum definitions
enum UserRole {
  USER
  SUPERADMIN
}

enum SubscriptionPlan {
  FREE
  STANDARD
  ESSENTIAL
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
}

enum IdentityType {
  EMAIL
  DOMAIN
}

enum IdentityStatus {
  PENDING
  VERIFIED
  FAILED
  TEMPORARY_FAILURE
}

enum TemplateType {
  ADMIN_CREATED
  FREE
  CUSTOM
}

// EmailStatus enum is redefined below with CampaignStatus and CampaignRecipientStatus
// enum EmailStatus {
//   QUEUED
//   SENDING
//   SENT
//   DELIVERED
//   BOUNCED
//   FAILED
//   COMPLAINED
// }

enum TenantStatus {
  ACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

// Core Models
model Tenant {
  id                    String           @id @default(cuid())
  organizationName      String           @unique
  sesConfigurationSet   String?          @unique // SES configuration set name
  sesReputationMetrics  Json?            // Bounce rate, complaint rate, etc.
  status                TenantStatus     @default(PENDING_VERIFICATION)
  subscriptionPlan      SubscriptionPlan @default(FREE)
  subscriptionStatus    SubscriptionStatus @default(ACTIVE)

  // Limits based on subscription
  monthlyEmailLimit     Int              @default(200)
  customTemplateLimit   Int              @default(5)
  attachmentSizeLimit   Int              @default(100) // in KB

  // Usage tracking
  emailsSentThisMonth   Int              @default(0)
  customTemplatesUsed   Int              @default(0)

  // Billing info
  billingEmail          String?

  // Admin notes
  adminNotes            String?          @db.Text

  // Timestamps
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt

  // Relations
  users                 User[]
  applications          Application[]
  identities            Identity[]
  templates             Template[]
  campaigns             Campaign[]
  emailLogs             EmailLog[]
  billingHistory        BillingHistory[]
  usageEvents           UsageEvent[]
  apiKeys               ApiKey[]

  @@index([status])
  @@map("tenants")
}

model User {
  id                     String           @id @default(cuid())
  email                  String           @unique
  password               String?          // Nullable for OAuth users
  firstName              String?
  lastName               String?
  role                   UserRole         @default(USER)
  isActive               Boolean          @default(true)
  isEmailVerified        Boolean          @default(false)
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  passwordResetToken     String?
  passwordResetExpires   DateTime?
  otpSecret              String?
  otpExpires             DateTime?
  lastLoginAt            DateTime?
  profilePicture         String?
  otpCode                String?
  otpExpiresAt           DateTime?
  otpAttempts            Int              @default(0)

  // Timestamps
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt

  // Relations
  tenantId               String
  tenant                 Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  applications           Application[]
  templates              Template[]
  campaigns              Campaign[]
  emailLogs              EmailLog[]
  apiKeys                ApiKey[]

  @@index([tenantId])
  @@index([email])
  @@map("users")
}

model Application {
  id                String        @id @default(cuid())
  name              String
  description       String?
  isActive          Boolean       @default(true)

  // Default sender identity for this application
  defaultIdentityId String?

  // Settings
  settings          Json?         // Custom application settings

  // Timestamps
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  tenantId          String
  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId            String
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  identities        Identity[]
  templates         Template[]
  campaigns         Campaign[]
  emailLogs         EmailLog[]
  defaultIdentity   Identity?     @relation("DefaultIdentity", fields: [defaultIdentityId], references: [id])

  @@unique([name, tenantId])
  @@index([tenantId])
  @@map("applications")
}

model Identity {
  id               String          @id @default(cuid())
  type             IdentityType
  value            String          // email address or domain name
  status           IdentityStatus  @default(PENDING)
  sesIdentityArn   String?         @unique // SES identity ARN

  // Verification details
  verificationToken String?
  dkimTokens       String[]        // DKIM verification tokens
  verifiedAt       DateTime?
  lastVerificationCheck DateTime?

  // DNS records for domain verification
  dkimRecords      Json?           // DKIM DNS records
  spfRecord        String?         // SPF DNS record
  dmarcRecord      String?         // DMARC DNS record

  // Reputation metrics
  reputationMetrics Json?

  // Timestamps
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relations
  applicationId    String?
  application      Application?    @relation(fields: [applicationId], references: [id], onDelete: SetNull)
  tenantId         String
  tenant           Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  campaigns        Campaign[]
  emailLogs        EmailLog[]
  defaultForApps   Application[]   @relation("DefaultIdentity")

  @@unique([value, tenantId])
  @@index([tenantId])
  @@index([status])
  @@map("identities")
}

model Template {
  id            String          @id @default(cuid())
  name          String
  type          TemplateType
  subject       String
  htmlContent   String
  textContent   String?
  isActive      Boolean         @default(true)
  variables     Json?

  // Template metadata
  description   String?
  category      String?
  tags          String[]
  previewImage  String?

  // Compliance features
  hasUnsubscribeLink Boolean      @default(true)
  complianceNotes   String?

  // Usage tracking
  timesUsed         Int           @default(0)

  // Timestamps
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  applicationId String
  application   Application     @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  tenantId      String
  tenant        Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  campaigns     Campaign[]
  emailLogs     EmailLog[]

  @@unique([name, tenantId, applicationId]) // Adjusted unique constraint
  @@index([tenantId])
  @@index([applicationId])
  @@map("templates")
}

// Email Campaign Models
model Campaign {
  id               String              @id @default(cuid())
  name             String
  subject          String?
  status           CampaignStatus      @default(DRAFT)
  scheduledAt      DateTime?
  sentAt           DateTime?
  completedAt      DateTime?
  cancelledAt      DateTime?
  deletedAt        DateTime?
  totalRecipients  Int                 @default(0)
  processed        Int                 @default(0)
  successful       Int                 @default(0)
  failed           Int                 @default(0)
  variables        Json                @default("{}")
  settings         Json                @default("{}")
  failureReason    String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  // Relations
  applicationId    String
  application      Application         @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  templateId       String
  template         Template            @relation(fields: [templateId], references: [id])
  identityId       String
  identity         Identity            @relation(fields: [identityId], references: [id])
  tenantId         String
  tenant           Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId           String
  user             User                @relation(fields: [userId], references: [id])
  recipients       CampaignRecipient[]
  emailLogs        EmailLog[]

  @@index([tenantId])
  @@index([applicationId])
  @@index([status])
  @@map("campaigns")
}

model CampaignRecipient {
  id             String               @id @default(cuid())
  email          String
  variables      Json                 @default("{}")
  status         CampaignRecipientStatus @default(PENDING)
  queuedAt       DateTime?
  sentAt         DateTime?
  failedAt       DateTime?
  failureReason  String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  // Relations
  campaignId     String
  campaign       Campaign             @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([status])
  @@map("campaign_recipients")
}

// Redefined EmailLog model to include campaign relations and other necessary fields
model EmailLog {
  id                String     @id @default(cuid())
  recipientEmail   String
  subject           String
  htmlContent      String
  textContent      String?
  status            EmailStatus    @default(PENDING) // Changed default to PENDING for consistency
  sesMessageId     String?
  bounceReason     String?
  complaintReason  String?
  openedAt         DateTime?
  clickedAt        DateTime?
  sentAt           DateTime?
  deliveredAt      DateTime?
  bouncedAt        DateTime?
  complainedAt     DateTime?
  failedAt         DateTime?
  failureReason    String?
  tags             Json?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  campaignId       String?
  campaign         Campaign?      @relation(fields: [campaignId], references: [id])
  templateId       String?
  template         Template?      @relation(fields: [templateId], references: [id])
  identityId       String?
  identity         Identity?      @relation(fields: [identityId], references: [id])
  applicationId    String?
  application      Application?   @relation(fields: [applicationId], references: [id])
  userId           String?
  user             User?          @relation(fields: [userId], references: [id])
  tenantId         String
  tenant           Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([campaignId])
  @@index([status])
  @@index([createdAt])
  @@map("email_logs")
}

model BillingHistory {
  id                String     @id @default(cuid())
  tenantId          String
  stripeInvoiceId   String?    @unique
  amount            Float
  currency          String     @default("usd")
  status            BillingStatus
  description       String?
  paidAt            DateTime?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  tenant            Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("billing_history")
}

model UsageEvent {
  id                String     @id @default(cuid())
  tenantId          String
  eventType         String
  eventData         Json?
  timestamp         DateTime
  createdAt         DateTime   @default(now())

  tenant            Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("usage_events")
}

// API Key Management
model ApiKey {
  id                String        @id @default(cuid())
  name              String        // User-friendly name for the key
  keyHash           String        @unique // Hashed version of the API key
  keyPrefix         String        // First 8 characters for identification
  permissions       String[]      // Array of permissions (send_email, manage_templates, etc.)
  isActive          Boolean       @default(true)
  lastUsedAt        DateTime?
  expiresAt         DateTime?     // Optional expiration
  
  // Rate limiting per key
  rateLimit         Int           @default(1000) // Requests per hour
  rateLimitWindow   Int           @default(3600) // Window in seconds
  
  // Usage tracking
  totalRequests     Int           @default(0)
  requestsThisHour  Int           @default(0)
  lastResetAt       DateTime      @default(now())
  
  // Metadata
  description       String?
  ipWhitelist       String[]      @default([]) // Optional IP restrictions
  
  // Relations
  tenantId          String
  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId            String
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  usage             ApiKeyUsage[]
  
  // Timestamps
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  @@index([tenantId])
  @@index([keyHash])
  @@index([keyPrefix])
  @@map("api_keys")
}

model ApiKeyUsage {
  id                String        @id @default(cuid())
  apiKeyId          String
  endpoint          String
  method            String
  statusCode        Int
  responseTime      Int           // Response time in milliseconds
  ipAddress         String?
  userAgent         String?
  requestSize       Int?          // Request body size in bytes
  responseSize      Int?          // Response body size in bytes
  errorMessage      String?
  
  // Relations
  apiKey            ApiKey        @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt         DateTime      @default(now())
  
  @@index([apiKeyId])
  @@index([createdAt])
  @@map("api_key_usage")
}


// Enum definitions for Campaign Management
enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELLED
  FAILED
  DELETED
}

enum CampaignRecipientStatus {
  PENDING
  QUEUED
  SENT
  FAILED
}

enum EmailStatus { // Renamed from original to avoid conflict and be specific
  PENDING
  SENDING
  SENT
  DELIVERED
  BOUNCED
  COMPLAINED
  FAILED
}

// Billing status enum
enum BillingStatus {
  SUCCESS
  FAILED
  PENDING
  CANCELLED
  REFUNDED
}


// System configuration and audit models
model SystemConfig {
  id                String        @id @default(cuid())
  key               String        @unique
  value             Json
  description       String?

  // Timestamps
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@map("system_config")
}

model AuditLog {
  id                String        @id @default(cuid())
  action            String        // 'create', 'update', 'delete', 'login', etc.
  resource          String        // 'user', 'tenant', 'application', etc.
  resourceId        String?

  // User context
  userId            String?
  userEmail         String?
  userRole          UserRole?
  tenantId          String?

  // Request context
  ipAddress         String?
  userAgent         String?

  // Changes
  oldValues         Json?
  newValues         Json?

  // Metadata
  metadata          Json?

  // Timestamps
  createdAt         DateTime      @default(now())

  @@map("audit_logs")
}